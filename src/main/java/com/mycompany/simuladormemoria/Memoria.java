/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.simuladormemoria;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JLabel;
import javax.swing.SwingUtilities;

/**
 *
 * @author karla
 */
public class Memoria extends javax.swing.JFrame {

    /**
     * Creates new form Memoria
     */
    
    ArrayList <Bloque> memoria = new ArrayList<Bloque>();
    ArrayList <Proceso> procesos = new ArrayList<Proceso>();
    String algoritmo = "FCFS";
    
    public class TemporizadorHilo implements Runnable {
    private int tiempor;
    private JLabel tmpo;
    private Runnable callback;

    public TemporizadorHilo(int tiempor, JLabel tmpo, Runnable callback) {
        this.tiempor = tiempor;
        this.tmpo = tmpo;
        this.callback = callback;
    }

    @Override
    public void run() {
        while (tiempor > 0) {
            try {
                Thread.sleep(1000); // Espera un segundo
                tiempor--; // Decrementa el tiempo
                
                // Actualiza la GUI en el hilo principal
                SwingUtilities.invokeLater(() -> tmpo.setText("Tiempo restante: " + tiempor + " segundos"));

            } catch (InterruptedException e) {
                e.printStackTrace();
                return; // Sale si el hilo es interrumpido
            }
        }

        // Cuando el tiempo termine, ejecutar el callback
        SwingUtilities.invokeLater(callback);
    }
}
    
    public Memoria() {
        initComponents();
        for (int i = 0; i < 32; i++) {
            for (int j = 0; j < 32; j++) {
                Bloque bloque = new Bloque(10+(j*21),50+(i*21),18,18);
                this.memorias.add(bloque);
                this.memoria.add(bloque);
            }
        }
        for (int i = 0; i < 30; i++) {
            for (int j = 0; j < 10; j++) {
                Bloque bloque = new Bloque(10+(j*21),50+(i*21),18,18);
                this.memoria.add(bloque);
                this.memoriavirtual.add(bloque);
            }
        }
        hilo.start();
    }
    
    Thread hilo = new Thread(){
        @Override
        public void run(){
            for (;;) {
                try {
                    sleep(100);
                    creaproceso();
                    Procesador.procesa(memoria,procesos);
                    Proceso p=Scheduller.elijeProceso(algoritmo,procesos);
                    if (p!=null) {
                        Despachador.despacha(p,memoria);
                    }
                } catch (InterruptedException ex) {
                    Logger.getLogger(Memoria.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    };
    
    private void creaproceso(){
        if (gv.aleatorio(1, 30)<10) {
            Proceso proceso = new Proceso();
            this.procesos.add(proceso);
            listaprocesosenadmontareas();
        }
    }
    
    private void listaprocesosenadmontareas(){
        this.admontareas.removeAll();
        DefaultListModel modelo = new DefaultListModel();
        for (Proceso proceso : this.procesos) {
            modelo.addElement(proceso.toString());
        }
        this.admontareas.setCellRenderer((list, value, index, isSelected, cellHasFocus) -> {
            JLabel label = new JLabel(value.toString());
            label.setOpaque(true);
            for (Proceso proceso : this.procesos) {
                if (value.toString().contains(proceso.getPid())) {
                    label.setBackground(proceso.getColor());
                    break;
                }
            }
        return label;
        });
        this.admontareas.setModel(modelo);
        
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        memorias = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        memoriavirtual = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        admontareas = new javax.swing.JList<>();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        memorias.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel1.setText("Memoria RAM");

        javax.swing.GroupLayout memoriasLayout = new javax.swing.GroupLayout(memorias);
        memorias.setLayout(memoriasLayout);
        memoriasLayout.setHorizontalGroup(
            memoriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(memoriasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(529, Short.MAX_VALUE))
        );
        memoriasLayout.setVerticalGroup(
            memoriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(memoriasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        memoriavirtual.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel2.setText("Memoria Virtual");

        javax.swing.GroupLayout memoriavirtualLayout = new javax.swing.GroupLayout(memoriavirtual);
        memoriavirtual.setLayout(memoriavirtualLayout);
        memoriavirtualLayout.setHorizontalGroup(
            memoriavirtualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(memoriavirtualLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(52, Short.MAX_VALUE))
        );
        memoriavirtualLayout.setVerticalGroup(
            memoriavirtualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(memoriavirtualLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(676, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(admontareas);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(memorias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(memoriavirtual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 735, Short.MAX_VALUE)
                        .addComponent(memorias, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(memoriavirtual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(56, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Memoria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Memoria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Memoria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Memoria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Memoria().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> admontareas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel memorias;
    private javax.swing.JPanel memoriavirtual;
    // End of variables declaration//GEN-END:variables

    void cambiarAlgoritmo(String sjf) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    void generarProcesos(DefaultListModel<String> memoryModel, List<Color> processColors) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    void ejecutarProceso() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    void mostrarResultados() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
